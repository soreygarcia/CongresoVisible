//      *********    DO NOT MODIFY THIS FILE     *********
//      This file is regenerated by a design tool. Making
//      changes to this file can cause errors.
namespace Expression.Blend.SampleData.MainViewModelDataSource
{
	using System; 

// To significantly reduce the sample data footprint in your production application, you can set
// the DISABLE_SAMPLE_DATA conditional compilation constant and disable sample data at runtime.
#if DISABLE_SAMPLE_DATA
	internal class MainViewModelDataSource { }
#else

	public class MainViewModelDataSource : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		public MainViewModelDataSource()
		{
			try
			{
				System.Uri resourceUri = new System.Uri("/CongresoVisible.Phone;component/SampleData/MainViewModelDataSource/MainViewModelDataSource.xaml", System.UriKind.Relative);
				if (System.Windows.Application.GetResourceStream(resourceUri) != null)
				{
					System.Windows.Application.LoadComponent(this, resourceUri);
				}
			}
			catch (System.Exception)
			{
			}
		}

		private Following _Following = new Following();

		public Following Following
		{
			get
			{
				return this._Following;
			}
		}

		private People _People = new People();

		public People People
		{
			get
			{
				return this._People;
			}
		}

		private Parties _Parties = new Parties();

		public Parties Parties
		{
			get
			{
				return this._Parties;
			}
		}

		private Filters _Filters = new Filters();

		public Filters Filters
		{
			get
			{
				return this._Filters;
			}
		}

		private SelectedPerson _SelectedPerson = new SelectedPerson();

		public SelectedPerson SelectedPerson
		{
			get
			{
				return this._SelectedPerson;
			}

			set
			{
				if (this._SelectedPerson != value)
				{
					this._SelectedPerson = value;
					this.OnPropertyChanged("SelectedPerson");
				}
			}
		}
	}

	public class Following : System.Collections.ObjectModel.ObservableCollection<FollowingItem>
	{ 
	}

	public class FollowingItem : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		private Party _Party = new Party();

		public Party Party
		{
			get
			{
				return this._Party;
			}

			set
			{
				if (this._Party != value)
				{
					this._Party = value;
					this.OnPropertyChanged("Party");
				}
			}
		}

		private string _Name = string.Empty;

		public string Name
		{
			get
			{
				return this._Name;
			}

			set
			{
				if (this._Name != value)
				{
					this._Name = value;
					this.OnPropertyChanged("Name");
				}
			}
		}

		private string _CandidateFor = string.Empty;

		public string CandidateFor
		{
			get
			{
				return this._CandidateFor;
			}

			set
			{
				if (this._CandidateFor != value)
				{
					this._CandidateFor = value;
					this.OnPropertyChanged("CandidateFor");
				}
			}
		}

		private System.Windows.Media.ImageSource _SmallImage = null;

		public System.Windows.Media.ImageSource SmallImage
		{
			get
			{
				return this._SmallImage;
			}

			set
			{
				if (this._SmallImage != value)
				{
					this._SmallImage = value;
					this.OnPropertyChanged("SmallImage");
				}
			}
		}
	}

	public class Party : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		private string _Name = string.Empty;

		public string Name
		{
			get
			{
				return this._Name;
			}

			set
			{
				if (this._Name != value)
				{
					this._Name = value;
					this.OnPropertyChanged("Name");
				}
			}
		}
	}

	public class People : System.Collections.ObjectModel.ObservableCollection<PeopleItem>
	{ 
	}

	public class PeopleItem : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}
	}

	public class Parties : System.Collections.ObjectModel.ObservableCollection<PartiesItem>
	{ 
	}

	public class PartiesItem : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}
	}

	public class Filters : System.Collections.ObjectModel.ObservableCollection<FiltersItem>
	{ 
	}

	public class FiltersItem : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}
	}

	public class SelectedPerson : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}
	}
#endif
}
