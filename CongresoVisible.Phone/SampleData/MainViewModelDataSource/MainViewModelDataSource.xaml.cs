//      *********    DO NOT MODIFY THIS FILE     *********
//      This file is regenerated by a design tool. Making
//      changes to this file can cause errors.
namespace Expression.Blend.SampleData.MainViewModelDataSource
{
	using System; 
	using System.ComponentModel;

// To significantly reduce the sample data footprint in your production application, you can set
// the DISABLE_SAMPLE_DATA conditional compilation constant and disable sample data at runtime.
#if DISABLE_SAMPLE_DATA
	internal class MainViewModelDataSource { }
#else

	public class MainViewModelDataSource : INotifyPropertyChanged
	{
		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		public MainViewModelDataSource()
		{
			try
			{
				Uri resourceUri = new Uri("/CongresoVisible.Phone;component/SampleData/MainViewModelDataSource/MainViewModelDataSource.xaml", UriKind.RelativeOrAbsolute);
				System.Windows.Application.LoadComponent(this, resourceUri);
			}
			catch
			{
			}
		}

		private Following _Following = new Following();

		public Following Following
		{
			get
			{
				return this._Following;
			}
		}

		private People _People = new People();

		public People People
		{
			get
			{
				return this._People;
			}
		}

		private Parties _Parties = new Parties();

		public Parties Parties
		{
			get
			{
				return this._Parties;
			}
		}

		private Filters _Filters = new Filters();

		public Filters Filters
		{
			get
			{
				return this._Filters;
			}
		}

		private SelectedPerson _SelectedPerson = new SelectedPerson();

		public SelectedPerson SelectedPerson
		{
			get
			{
				return this._SelectedPerson;
			}

			set
			{
				if (this._SelectedPerson != value)
				{
					this._SelectedPerson = value;
					this.OnPropertyChanged("SelectedPerson");
				}
			}
		}

		private RandomPeople _RandomPeople = new RandomPeople();

		public RandomPeople RandomPeople
		{
			get
			{
				return this._RandomPeople;
			}
		}

		private SelectedParty _SelectedParty = new SelectedParty();

		public SelectedParty SelectedParty
		{
			get
			{
				return this._SelectedParty;
			}

			set
			{
				if (this._SelectedParty != value)
				{
					this._SelectedParty = value;
					this.OnPropertyChanged("SelectedParty");
				}
			}
		}
	}

	public class Following : System.Collections.ObjectModel.ObservableCollection<FollowingItem>
	{ 
	}

	public class FollowingItem : INotifyPropertyChanged
	{
		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private Party _Party = new Party();

		public Party Party
		{
			get
			{
				return this._Party;
			}

			set
			{
				if (this._Party != value)
				{
					this._Party = value;
					this.OnPropertyChanged("Party");
				}
			}
		}

		private string _Name = string.Empty;

		public string Name
		{
			get
			{
				return this._Name;
			}

			set
			{
				if (this._Name != value)
				{
					this._Name = value;
					this.OnPropertyChanged("Name");
				}
			}
		}

		private string _CandidateFor = string.Empty;

		public string CandidateFor
		{
			get
			{
				return this._CandidateFor;
			}

			set
			{
				if (this._CandidateFor != value)
				{
					this._CandidateFor = value;
					this.OnPropertyChanged("CandidateFor");
				}
			}
		}

		private System.Windows.Media.ImageSource _SmallImage = null;

		public System.Windows.Media.ImageSource SmallImage
		{
			get
			{
				return this._SmallImage;
			}

			set
			{
				if (this._SmallImage != value)
				{
					this._SmallImage = value;
					this.OnPropertyChanged("SmallImage");
				}
			}
		}
	}

	public class Party : INotifyPropertyChanged
	{
		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private string _Name = string.Empty;

		public string Name
		{
			get
			{
				return this._Name;
			}

			set
			{
				if (this._Name != value)
				{
					this._Name = value;
					this.OnPropertyChanged("Name");
				}
			}
		}
	}

	public class People : System.Collections.ObjectModel.ObservableCollection<PeopleItem>
	{ 
	}

	public class PeopleItem : INotifyPropertyChanged
	{
		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	public class Parties : System.Collections.ObjectModel.ObservableCollection<PartiesItem>
	{ 
	}

	public class PartiesItem : INotifyPropertyChanged
	{
		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private string _Name = string.Empty;

		public string Name
		{
			get
			{
				return this._Name;
			}

			set
			{
				if (this._Name != value)
				{
					this._Name = value;
					this.OnPropertyChanged("Name");
				}
			}
		}

		private System.Windows.Media.ImageSource _Logo = null;

		public System.Windows.Media.ImageSource Logo
		{
			get
			{
				return this._Logo;
			}

			set
			{
				if (this._Logo != value)
				{
					this._Logo = value;
					this.OnPropertyChanged("Logo");
				}
			}
		}
	}

	public class Filters : System.Collections.ObjectModel.ObservableCollection<FiltersItem>
	{ 
	}

	public class FiltersItem : INotifyPropertyChanged
	{
		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	public class SelectedPerson : INotifyPropertyChanged
	{
		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	public class RandomPeople : System.Collections.ObjectModel.ObservableCollection<RandomPeopleItem>
	{ 
	}

	public class RandomPeopleItem : INotifyPropertyChanged
	{
		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private Party1 _Party = new Party1();

		public Party1 Party
		{
			get
			{
				return this._Party;
			}

			set
			{
				if (this._Party != value)
				{
					this._Party = value;
					this.OnPropertyChanged("Party");
				}
			}
		}

		private System.Windows.Media.ImageSource _MediumImage = null;

		public System.Windows.Media.ImageSource MediumImage
		{
			get
			{
				return this._MediumImage;
			}

			set
			{
				if (this._MediumImage != value)
				{
					this._MediumImage = value;
					this.OnPropertyChanged("MediumImage");
				}
			}
		}

		private string _Name = string.Empty;

		public string Name
		{
			get
			{
				return this._Name;
			}

			set
			{
				if (this._Name != value)
				{
					this._Name = value;
					this.OnPropertyChanged("Name");
				}
			}
		}

		private string _CandidateFor = string.Empty;

		public string CandidateFor
		{
			get
			{
				return this._CandidateFor;
			}

			set
			{
				if (this._CandidateFor != value)
				{
					this._CandidateFor = value;
					this.OnPropertyChanged("CandidateFor");
				}
			}
		}
	}

	public class Party1 : INotifyPropertyChanged
	{
		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private string _Logo = string.Empty;

		public string Logo
		{
			get
			{
				return this._Logo;
			}

			set
			{
				if (this._Logo != value)
				{
					this._Logo = value;
					this.OnPropertyChanged("Logo");
				}
			}
		}

		private string _Name = string.Empty;

		public string Name
		{
			get
			{
				return this._Name;
			}

			set
			{
				if (this._Name != value)
				{
					this._Name = value;
					this.OnPropertyChanged("Name");
				}
			}
		}
	}

	public class SelectedParty : INotifyPropertyChanged
	{
		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private People1 _People = new People1();

		public People1 People
		{
			get
			{
				return this._People;
			}
		}

		private string _Name = string.Empty;

		public string Name
		{
			get
			{
				return this._Name;
			}

			set
			{
				if (this._Name != value)
				{
					this._Name = value;
					this.OnPropertyChanged("Name");
				}
			}
		}
	}

	public class People1 : System.Collections.ObjectModel.ObservableCollection<PeopleItem1>
	{ 
	}

	public class PeopleItem1 : INotifyPropertyChanged
	{
		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private string _Name = string.Empty;

		public string Name
		{
			get
			{
				return this._Name;
			}

			set
			{
				if (this._Name != value)
				{
					this._Name = value;
					this.OnPropertyChanged("Name");
				}
			}
		}

		private string _CandidateFor = string.Empty;

		public string CandidateFor
		{
			get
			{
				return this._CandidateFor;
			}

			set
			{
				if (this._CandidateFor != value)
				{
					this._CandidateFor = value;
					this.OnPropertyChanged("CandidateFor");
				}
			}
		}

		private System.Windows.Media.ImageSource _SmallImage = null;

		public System.Windows.Media.ImageSource SmallImage
		{
			get
			{
				return this._SmallImage;
			}

			set
			{
				if (this._SmallImage != value)
				{
					this._SmallImage = value;
					this.OnPropertyChanged("SmallImage");
				}
			}
		}

		private Party2 _Party = new Party2();

		public Party2 Party
		{
			get
			{
				return this._Party;
			}

			set
			{
				if (this._Party != value)
				{
					this._Party = value;
					this.OnPropertyChanged("Party");
				}
			}
		}
	}

	public class Party2 : INotifyPropertyChanged
	{
		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private string _Name = string.Empty;

		public string Name
		{
			get
			{
				return this._Name;
			}

			set
			{
				if (this._Name != value)
				{
					this._Name = value;
					this.OnPropertyChanged("Name");
				}
			}
		}
	}
#endif
}
